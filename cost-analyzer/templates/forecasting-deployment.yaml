{{- if .Values.forecasting.enabled }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "forecasting.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{ include "forecasting.commonLabels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{ include "forecasting.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: forecasting
        app.kubernetes.io/instance: {{ .Release.Name }}
        app: forecasting
      {{- with .Values.global.podAnnotations}}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      restartPolicy: Always
      containers:
        - name: forecasting
          {{- if .Values.kubecostModel }}
          {{- if .Values.kubecostModel.openSourceOnly }}
          {{- fail "Kubecost Forecasting cannot be used with open source only" }}
          {{- else if .Values.forecasting.fullImageName }}
          image: {{ .Values.forecasting.fullImageName }}
          {{- else if .Values.kubecostModel.fullImageName }}
          image: {{ .Values.kubecostModel.fullImageName }}
          {{- else if .Values.imageVersion }}
          image: {{ .Values.kubecostModel.image }}:{{ .Values.imageVersion }}
          {{- else }}
          image: {{ .Values.kubecostModel.image }}:prod-{{ $.Chart.AppVersion }}
          {{ end }}
          {{- else }}
          image: gcr.io/kubecost1/cost-model:prod-{{ $.Chart.AppVersion }}
          {{ end }}
          args: ["forecasting"]
          {{/*
          fix readinessProbe

          readinessProbe:
            httpGet:
              path: /healthz
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 200
          */}}
          imagePullPolicy: Always
          ports:
            - name: tcp-api
              containerPort: 5000
              protocol: TCP
          resources:
            {{- toYaml .Values.forecasting.resources | nindent 12 }}
          volumeMounts:
          env:
            - name: CONFIG_PATH
              value: /var/configs/
            {{- range $key, $value := .Values.forecasting.env }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{ toYaml .Values.imagePullSecrets | indent 2 }}
    {{- end }}
      {{- if .Values.forecasting.priority }}
      {{- if .Values.forecasting.priority.enabled }}
      {{- if .Values.forecasting.priority.name }}
      priorityClassName: {{ .Values.forecasting.priority.name }}
      {{- else }}
      priorityClassName: {{ template "cost-analyzer.fullname" . }}-forecasting-priority
      {{- end }}
      {{- end }}
      {{- end }}
      {{- with .Values.forecasting.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.forecasting.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.forecasting.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
