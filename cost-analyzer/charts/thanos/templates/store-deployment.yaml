{{ if .Values.global.thanos.enabled }}
{{ if .Values.store.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "thanos.componentname" (list $ "store") }}
  labels:
    app.kubernetes.io/name: {{ include "thanos.name" . }}
    helm.sh/chart: {{ include "thanos.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
    app.kubernetes.io/component: store
{{ with .Values.store.deploymentLabels }}{{ toYaml . | indent 4 }}{{ end }}
  {{- with .Values.store.deploymentAnnotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.store.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "thanos.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: store
{{ with .Values.store.deploymentMatchLabels }}{{ toYaml . | indent 6 }}{{ end }}
{{ with .Values.store.deploymentStrategy }}
  strategy: {{ toYaml . | nindent 4 }}
{{ end }}
  template:
    metadata:
      labels:
{{ with .Values.store.labels }}{{ toYaml . | indent 8 }}{{ end }}
        app.kubernetes.io/name: {{ include "thanos.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: store
      {{- with  .Values.store.annotations }}
      annotations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.store.metrics.annotations.enabled  }}
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.store.http.port }}"
      {{- end }}
    spec:
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
       {{ toYaml .Values.imagePullSecrets | indent 2 }}
    {{- end }}
      containers:
      - name: thanos-store
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
        - "store"
        - "--data-dir=/var/thanos/store"
        - "--log.level={{ .Values.store.logLevel }}"
        - "--http-address=0.0.0.0:{{ .Values.store.http.port }}"
        - "--grpc-address=0.0.0.0:{{ .Values.store.grpc.port }}"
        - "--objstore.config-file=/etc/config/object-store.yaml"
        {{- if .Values.store.indexCacheSize }}
        - "--index-cache-size={{ .Values.store.indexCacheSize }}"
        {{- end }}
        {{- if .Values.store.chunkPoolSize }}
        - "--chunk-pool-size={{ .Values.store.chunkPoolSize }}"
        {{- end }}
        {{- if .Values.store.grpcSeriesSampleLimit }}
        - "--store.grpc.series-sample-limit={{ .Values.store.grpcSeriesSampleLimit }}"
        {{- end }}
        {{- if .Values.store.grpcSeriesMaxConcurrency }}
        - "--store.grpc.series-max-concurrency={{ .Values.store.grpcSeriesMaxConcurrency }}"
        {{- end }}
        {{- if .Values.store.syncBlockDuration }}
        - "--sync-block-duration={{ .Values.store.syncBlockDuration }}"
        {{- end }}
        {{- if .Values.store.blockSyncConcurrency }}
        - "--block-sync-concurrency={{ .Values.store.blockSyncConcurrency }}"
        {{- end }}
        {{- if .Values.store.extraArgs }}
        {{ toYaml .Values.store.extraArgs | nindent 8 }}
        {{- end }}
        ports:
        - name: http
          containerPort: {{ .Values.store.http.port }}
        - name: grpc
          containerPort: {{ .Values.store.grpc.port }}
        env:
          {{- toYaml .Values.store.extraEnv | nindent 10 }}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        {{- if .Values.store.selfsignedCertConfigMapName }}
        - name: {{ .Values.store.selfsignedCertConfigMapName }}
          mountPath: /etc/ssl/certs/my-cert.pem
          subPath: my-cert.pem
          readOnly: false
        {{- end }}
        - name: data
          mountPath: /var/thanos/store
        {{- if .Values.store.certSecretName }}
        - mountPath: /etc/certs
          name: {{ .Values.store.certSecretName }}
          readOnly: true
        {{- end }}
        resources:
          {{ toYaml .Values.store.resources | nindent 10 }}
      volumes:
      - name: data
      {{- if .Values.store.dataVolume }}
      {{- if .Values.store.dataVolume.persistentVolumeClaim }}
      {{- if .Values.store.dataVolume.persistentVolumeClaim.claimName }}
        persistentVolumeClaim:
          claimName: {{ .Values.store.dataVolume.persistentVolumeClaim.claimName }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}          
      - name: config-volume
        secret:
          secretName: {{ include "thanos.secretname" . }}
      {{- if .Values.store.selfsignedCertConfigMapName }}
      - name: {{ .Values.store.selfsignedCertConfigMapName }}
        configMap:
          name: {{ .Values.store.selfsignedCertConfigMapName }}
      {{- end }}
      {{- if .Values.store.certSecretName }}
      - name: {{ .Values.store.certSecretName }}
        secret:
          defaultMode: 420
          secretName: {{ .Values.store.certSecretName }}
      {{- end }}
      {{- with .Values.store.securityContext }}
      securityContext: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.store.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.store.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.store.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with  .Values.store.serviceAccount }}
      serviceAccountName: "{{ . }}"
      {{- end }}
{{- end }}
{{ end }}
