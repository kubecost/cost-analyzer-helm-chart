{{ if .Values.global.thanos.enabled }}
{{ if .Values.compact.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "thanos.componentname" (list $ "compact") }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "thanos.name" . }}
    helm.sh/chart: {{ include "thanos.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
    app.kubernetes.io/component: compact
{{ with .Values.compact.deploymentLabels }}{{ toYaml . | indent 4 }}{{ end -}}
  {{- with .Values.compact.deploymentAnnotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.compact.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "thanos.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: compact
{{ with .Values.compact.deploymentMatchLabels }}{{ toYaml . | indent 6 }}{{ end }}
{{ with .Values.compact.deploymentStrategy }}
  strategy: {{ toYaml . | nindent 4 }}
{{ end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "thanos.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: compact
{{ with  .Values.compact.labels }}{{ toYaml . | indent 8 }}{{ end }}
      {{- with  .Values.compact.annotations }}
      annotations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.compact.metrics.annotations.enabled  }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.compact.http.port }}"
      {{- end }}
    spec:
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
       {{ toYaml .Values.imagePullSecrets | indent 2 }}
    {{- end }}
    {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
    {{- end }}
      containers:
      - name: thanos-compact
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env: {{- with .Values.compact.extraEnv }}{{ toYaml . | nindent 8 }}{{- end }}
        args:
        - "compact"
        - "--log.level={{ .Values.compact.logLevel }}"
        - "--http-address=0.0.0.0:{{ .Values.compact.http.port }}"
        - "--objstore.config-file=/etc/config/object-store.yaml"
        - "--data-dir=/var/thanos/compact"
        - "--consistency-delay={{ .Values.compact.consistencyDelay }}"
        - "--retention.resolution-raw={{ .Values.compact.retentionResolutionRaw }}"
        - "--retention.resolution-5m={{ .Values.compact.retentionResolution5m }}"
        - "--retention.resolution-1h={{ .Values.compact.retentionResolution1h }}"
        - "--compact.concurrency={{ .Values.compact.compactConcurrency }}"
{{- if .Values.compact.disableDownsampling }}
        - "--downsampling.disable"
{{- end }}
        - "--wait"
{{ with .Values.compact.extraArgs }}{{ toYaml . | indent 8 }}{{- end }}
        ports:
        - name: http
          containerPort: {{ .Values.compact.http.port }}
        volumeMounts:
        {{- if .Values.compact.selfsignedCertConfigMapName }}
        - name: {{ .Values.compact.selfsignedCertConfigMapName }}
          mountPath: /etc/ssl/certs/my-cert.pem
          subPath: my-cert.pem
          readOnly: false
        {{- end }}
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: data-volume
          mountPath: /var/thanos/compact
        resources: {{ toYaml .Values.compact.resources | nindent 10 }}
      volumes:
      {{- if .Values.compact.selfsignedCertConfigMapName }}
      - name: {{ .Values.compact.selfsignedCertConfigMapName }}
        configMap:
          name: {{ .Values.compact.selfsignedCertConfigMapName }}
      {{- end }}
      - name: data-volume
      {{- if .Values.compact.dataVolume }}
      {{- if .Values.compact.dataVolume.persistentVolumeClaim }}
      {{- if .Values.compact.dataVolume.persistentVolumeClaim.claimName }}
        persistentVolumeClaim:
          claimName: {{ .Values.compact.dataVolume.persistentVolumeClaim.claimName }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: config-volume
        secret:
          secretName: {{ include "thanos.secretname" . }}
      {{- with .Values.compact.securityContext }}
      securityContext: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.compact.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.compact.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.compact.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with  .Values.compact.serviceAccount }}
      serviceAccountName: "{{ . }}"
      {{- end }}
{{- end }}
{{ end }}
