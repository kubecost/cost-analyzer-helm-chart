{{ if .Values.global.thanos.enabled }}
{{ if .Values.query.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "thanos.componentname" (list $ "query") }}
  labels:
    app.kubernetes.io/name: {{ include "thanos.name" . }}
    helm.sh/chart: {{ include "thanos.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
    app.kubernetes.io/component: query
{{ with .Values.query.deploymentLabels }}{{ toYaml . | indent 4 }}{{ end }}
  {{- with .Values.query.deploymentAnnotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}
spec:
{{- if not .Values.query.autoscaling.enabled  }}
  replicas: {{ .Values.query.replicaCount | default 1 }}
{{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "thanos.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: query
{{ with .Values.query.deploymentMatchLabels }}{{ toYaml . | indent 6 }}{{ end }}
{{ with .Values.query.deploymentStrategy }}
  strategy: {{ toYaml . | nindent 4 }}
{{ end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "thanos.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: query
{{ with  .Values.query.labels }}{{ toYaml . | indent 8 }}{{ end }}
      {{- with  .Values.query.annotations }}
      annotations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.query.metrics.annotations.enabled  }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.query.http.port }}"
      {{- end }}
    spec:
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
       {{ toYaml .Values.imagePullSecrets | indent 2 }}
    {{- end }}
      containers:
      - name: thanos-query
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
        - "query"
        - "--log.level={{ .Values.query.logLevel }}"
        - "--grpc-address=0.0.0.0:{{ .Values.query.grpc.port }}"
        - "--http-address=0.0.0.0:{{ .Values.query.http.port }}"
        - "--query.timeout={{ .Values.query.timeout }}"
        - "--query.max-concurrent={{ .Values.query.maxConcurrent }}"
        {{- if .Values.query.autoDownsampling }}
        - "--query.auto-downsampling"
        {{- end }}
        {{- if .Values.query.replicaLabel }}
        - "--query.replica-label={{ .Values.query.replicaLabel }}"
        {{- end }}
        {{- if .Values.query.webRoutePrefix }}
        - "--web.route-prefix={{ .Values.query.webRoutePrefix }}"
        {{- end }}
        {{- if .Values.query.webExternalPrefix }}
        - "--web.external-prefix={{ .Values.query.webExternalPrefix }}"
        {{- end }}
        {{- if .Values.query.webPrefixHeader }}
        - "--web.prefix-header={{ .Values.query.webPrefixHeader }}"
        {{- end }}
        {{- if .Values.query.storeDNSResolver }}
        - "--store.sd-dns-resolver={{ .Values.query.storeDNSResolver }}"
        {{- end }}
        {{- if .Values.query.storeDNSDiscovery }}
        - "--store=dnssrv+_grpc._tcp.{{ include "thanos.componentname" (list $ "store") }}-grpc.{{ .Release.Namespace }}.svc"
        {{- end  }}
        {{- if .Values.query.sidecarDNSDiscovery }}
        - "--store=dnssrv+_grpc._tcp.{{ include "thanos.componentname" (list $ "sidecar") }}-grpc.{{ .Release.Namespace }}.svc"
        {{- end  }}
        {{- range .Values.query.stores }}
        - "--endpoint={{ . }}"
        {{- end }}
        {{- range .Values.query.serviceDiscoveryFiles }}
        - "--store.sd-files={{ . }}"
        {{- end }}
        {{- range .Values.query.serviceDiscoveryFileConfigMaps }}
        - "--store.sd-files=/etc/query/{{ . }}/*.yaml"
        - "--store.sd-files=/etc/query/{{ . }}/*.yml"
        - "--store.sd-files=/etc/query/{{ . }}/*.json"
        {{- end }}
        {{- if .Values.query.serviceDiscoveryInterval }}
        - "--store.sd-interval={{ .Values.query.serviceDiscoveryInterval }}"
        {{- end }}

        {{- if .Values.query.extraArgs }}
        {{ toYaml .Values.query.extraArgs | nindent 8 }}
        {{- end }}
        ports:
        - name: http
          containerPort: {{ .Values.query.http.port }}
        - name: grpc
          containerPort: {{ .Values.query.grpc.port }}
        resources:
          {{ toYaml .Values.query.resources | nindent 10 }}
        env:
          {{- toYaml .Values.query.extraEnv | nindent 10 }}
        volumeMounts:
        {{- range .Values.query.serviceDiscoveryFileConfigMaps }}
        - mountPath: /etc/query/{{ . }}
          name: {{ . }}
        {{- end }}
        {{- if .Values.query.certSecretName }}
        - mountPath: /etc/certs
          name: {{ .Values.query.certSecretName }}
          readOnly: true
        {{- end }}
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
      volumes:
      {{- range .Values.query.serviceDiscoveryFileConfigMaps }}
      - name: {{ . }}
        configMap:
          defaultMode: 420
          name: {{ . }}
      {{- end }}
      {{- if .Values.query.certSecretName }}
      - name: {{ .Values.query.certSecretName }}
        secret:
          defaultMode: 420
          secretName: {{ .Values.query.certSecretName }}
      {{- end }}
      {{- with .Values.query.securityContext }}
      securityContext: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.query.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.query.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.query.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with  .Values.query.serviceAccount }}
      serviceAccountName: "{{ . }}"
      {{- end }}
{{ end }}
{{ end }}
